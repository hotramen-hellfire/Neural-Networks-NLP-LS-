{"cells":[{"cell_type":"markdown","metadata":{"id":"pbwA7e12AVLe"},"source":["# **Sentiment Analysis using LSTM**\n","In this week's graded assignment, you will implement a neural network that will perform senyiment analysis on movie reviews and classify them as positive or negative.\n","\n","You are to only write/modify the code in between consecutive `# <START>` and `# <END>` comments. DO NOT modify other parts of the notebook, your assignments will not be graded otherwise.\n","\n","```python\n","\"Don't modify any code here\"\n","\n","# <START>\n","\"YOUR CODE GOES HERE!\"\n","# <END>\n","\n","\"Don't modify any code here\"\n","```\n","## **Before you begin**\n","Before you start with the assignment, you will have to upload the CSV file containing the movie reviews you will classify to your Google Drive. Here's a link to the dataset: [Dataset Link](https://drive.google.com/file/d/1nqmfdx7dj5qgynVwzD1CMjFFZoBeKrmD/view?usp=sharing)  \n","Download **reviews.csv** and upload it to your Drive.\n","\n","### **Make sure to upload to the same account that you are using on Colab, otherwise you won't be able to access the files**\n"]},{"cell_type":"markdown","metadata":{"id":"D0lIe1uahq_L"},"source":["## **Mounting Google Drive**\n","First, we need to import the dataset from your Google Drive. To do so, **run the below cell**. This will mount your Drive to the running Colab instance. Then, you will be able to access all your Google Drive data in this notebook."]},{"cell_type":"code","execution_count":1,"metadata":{"id":"ObnNbRJPQrYK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534460809,"user_tz":-330,"elapsed":29503,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"a99141f9-0731-4d24-aefa-c7fe2f48aa7f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"markdown","metadata":{"id":"ElYLMOGFBq1r"},"source":["## **Import the Libraries**\n","\n","Run the cell below to import all the necessary libraries for building the sentiment analysis model."]},{"cell_type":"code","execution_count":2,"metadata":{"id":"eNUw4hS8BrbK","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534481559,"user_tz":-330,"elapsed":12759,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"5a4d4237-4cf6-4685-f137-7885fb4b4bd1"},"outputs":[{"output_type":"stream","name":"stderr","text":["[nltk_data] Downloading package punkt to /root/nltk_data...\n","[nltk_data]   Unzipping tokenizers/punkt.zip.\n","[nltk_data] Downloading package stopwords to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/stopwords.zip.\n","[nltk_data] Downloading package wordnet to /root/nltk_data...\n"]},{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (4.65.0)\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","\n","device = 'cuda' if torch.cuda.is_available() else 'cpu'\n","\n","import nltk\n","nltk.download('punkt')\n","nltk.download('stopwords')\n","nltk.download('wordnet')\n","from nltk.corpus import stopwords\n","from nltk.stem import WordNetLemmatizer\n","from nltk.tokenize import RegexpTokenizer\n","\n","!pip install tqdm\n","from tqdm import tqdm\n","from torch.utils.data import TensorDataset, DataLoader\n","from sklearn.model_selection import train_test_split"]},{"cell_type":"markdown","source":["## **Loading the Dataset**\n","\n","The below cell contains a function `getdata`, which takes as argument the path to `reviews.csv` in your Google Drive, loads the CSV file into a Pandas DataFrame and finally returns the DataFrame.\n","\n","Complete the function and then add the path to `IMDB Dataset.csv` in the space indicated. Run the cell to load the dataset."],"metadata":{"id":"-q-caOpJ_qhU"}},{"cell_type":"code","source":["#import os\n","def getdata(path):\n","\n","  # <START>\n","  df = pd.read_csv(path)\n","  return df\n","  # <END>\n","\n","# Insert the path to the file in the space below\n","# <START>\n","path = './drive/MyDrive/reviews.csv'\n","# <END>\n","# os.listdir(\"\")\n","df = getdata(path)\n","df.head(5)\n","# df['review']\n","# df['sentiment']"],"metadata":{"id":"lpaOs3EkAgJC","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1690534491413,"user_tz":-330,"elapsed":3796,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"325e7581-75c6-4ee5-f259-74761aee14e6"},"execution_count":3,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                              review sentiment\n","0  One of the other reviewers has mentioned that ...  positive\n","1  A wonderful little production. <br /><br />The...  positive\n","2  I thought this was a wonderful way to spend ti...  positive\n","3  Basically there's a family where a little boy ...  negative\n","4  Petter Mattei's \"Love in the Time of Money\" is...  positive"],"text/html":["\n","\n","  <div id=\"df-0f5164c6-c1b9-4566-9288-c10b5d92f3a3\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>review</th>\n","      <th>sentiment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>One of the other reviewers has mentioned that ...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>A wonderful little production. &lt;br /&gt;&lt;br /&gt;The...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>I thought this was a wonderful way to spend ti...</td>\n","      <td>positive</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Basically there's a family where a little boy ...</td>\n","      <td>negative</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Petter Mattei's \"Love in the Time of Money\" is...</td>\n","      <td>positive</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f5164c6-c1b9-4566-9288-c10b5d92f3a3')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","\n","\n","\n","    <div id=\"df-3c42a75c-43f7-4713-883a-a1ef101dc3cd\">\n","      <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3c42a75c-43f7-4713-883a-a1ef101dc3cd')\"\n","              title=\"Suggest charts.\"\n","              style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","      </button>\n","    </div>\n","\n","<style>\n","  .colab-df-quickchart {\n","    background-color: #E8F0FE;\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: #1967D2;\n","    height: 32px;\n","    padding: 0 0 0 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: #E2EBFA;\n","    box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: #174EA6;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","    background-color: #3B4455;\n","    fill: #D2E3FC;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart:hover {\n","    background-color: #434B5C;\n","    box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","    filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","    fill: #FFFFFF;\n","  }\n","</style>\n","\n","    <script>\n","      async function quickchart(key) {\n","        const containerElement = document.querySelector('#' + key);\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      }\n","    </script>\n","\n","      <script>\n","\n","function displayQuickchartButton(domScope) {\n","  let quickchartButtonEl =\n","    domScope.querySelector('#df-3c42a75c-43f7-4713-883a-a1ef101dc3cd button.colab-df-quickchart');\n","  quickchartButtonEl.style.display =\n","    google.colab.kernel.accessAllowed ? 'block' : 'none';\n","}\n","\n","        displayQuickchartButton(document);\n","      </script>\n","      <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-0f5164c6-c1b9-4566-9288-c10b5d92f3a3 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-0f5164c6-c1b9-4566-9288-c10b5d92f3a3');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n"]},"metadata":{},"execution_count":3}]},{"cell_type":"markdown","metadata":{"id":"GbRrtTIYBrbM"},"source":["## **Splitting the Dataset into Training and Testing Data**\n","Complete the below cell that splits the loaded data into training and testing sets. The recommended train:test ratio is 80:20, but feel free to change this later and see how it affects the accuracy of the model. Note that the cell should store the training and testing reviews in `x_train` and `x_test` respectively, and their corresponding sentiments in `y_train` and `y_test` respectively.\n","\n","<details>\n","  <summary>Hint</summary>\n","  Check out the train_test_split function from sklearn.\n","  Do not forget to shuffle the dataset!\n","</details>"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"2VAB-v2HBrbM","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534494997,"user_tz":-330,"elapsed":418,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"2389814a-458e-4f1a-da3c-efe50089159c"},"outputs":[{"output_type":"stream","name":"stdout","text":["(40000,)\n","(10000,)\n"]}],"source":["train_df, test_df = train_test_split(df, test_size=0.2, random_state=42, shuffle=True)\n","\n","# <START>\n","x_train = train_df['review']\n","x_test = test_df['review']\n","y_train = train_df['sentiment']\n","y_test = test_df['sentiment']\n","# <END>\n","\n","print(x_train.shape)\n","print(x_test.shape)"]},{"cell_type":"markdown","source":["Before we proceed, let's make sure we have a well distributed training dataset by checking the number of positive and negative reviews it contains.\n","\n","If your values deviate too much from the optimal 50-50 ratio, it is recommended that you modify the above cell to shuffle the dataset differently."],"metadata":{"id":"IOJcQL3EGVOX"}},{"cell_type":"code","source":["count_positive = 0\n","count_negative = 0\n","\n","for i in y_train:\n","  if i == \"positive\":\n","    count_positive += 1\n","  elif i ==\"negative\":\n","    count_negative += 1\n","\n","print(\"Positive reviews:\", count_positive/(count_positive + count_negative)*100, \"%\")\n","print(\"Negative reviews:\", count_negative/(count_positive + count_negative)*100, \"%\")"],"metadata":{"id":"UBm9-OJ5GiiX","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534498216,"user_tz":-330,"elapsed":626,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"72df81fd-49b6-4986-dc15-dfc351fe109e"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Positive reviews: 49.902499999999996 %\n","Negative reviews: 50.0975 %\n"]}]},{"cell_type":"markdown","metadata":{"id":"vbF4nskOBrbN"},"source":["## **Preprocessing**\n","As you saw in last week's assignment, preprocessing a very important step in NLP. Complete the below function to perform the following tasks. The function should take as input a set of reviews `x_train` or `x_test`, and return a list of preprocessed reviews.\n","\n","\n","1.   Case the corpus to lower case\n","2.   Remove punctuation\n","3.   Lemmatize\n","4.   Remove stop words\n","\n","Feel free to refer to last week's assignment for guidance.\n","\n","*Note that as the dataset is much larger this time, the cell may take a while to run.*"]},{"cell_type":"code","execution_count":6,"metadata":{"id":"TJn1Uqc4BrbO","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534545608,"user_tz":-330,"elapsed":44808,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"d3ffc405-10e1-4cea-89c6-11e9e9390fbd"},"outputs":[{"output_type":"stream","name":"stdout","text":["[['assignment'], ['notebook', 'run', 'cloud'], ['cloud', 'however', 'much', 'ground']]\n"]}],"source":["#The list of stopwords has been coverted into a set, making it faster to check if a given word is in it\n","stop_words = set(stopwords.words('english'))\n","\n","# Using the below tokenizer helps us get rid of punctuation,\n","tokenizer = RegexpTokenizer(r'\\w+')\n","# print(dir(tokenizer))\n","# And the lemmatizer to convert words to simpler forms\n","lemmatizer = WordNetLemmatizer()\n","# print(dir(lemmatizer))\n","def preprocess(x_set):\n","    result = []\n","    for i in x_set:\n","      # <START>\n","      out = [lemmatizer.lemmatize(q) for q in tokenizer.tokenize(i.lower()) if q not in stop_words]\n","      # <END>\n","      result.append(out)\n","    return result\n","\n","#Testing the function\n","test_preprocess = preprocess([\"This is an assignment.\",'The notebook runs on the cloud.','The cloud, however, is very much on the ground,'])\n","print(test_preprocess)\n","assert test_preprocess == [['assignment'], ['notebook', 'run', 'cloud'], ['cloud', 'however', 'much', 'ground']]\n","\n","x_train_preprocessed = preprocess(x_train)\n","x_test_preprocessed = preprocess(x_test)"]},{"cell_type":"markdown","source":["## **Building the Vocabulary**\n","Complete the below function which takes as argument the preprocessed **training set** and returns a dictionary mapping each unique word to a unique ID. However this time, we shall begin with giving the first word an ID of `1`. The reason for this will become clear soon.\n","\n","Again, feel free to refer to last week's assignment."],"metadata":{"id":"SNLwSHF4Lcqu"}},{"cell_type":"code","source":["def create_vocabulary(x_train_preprocessed):\n","  '''Creates a dictionary with all unique words in corpus with id'''\n","  vocabulary = {}\n","  id = 1\n","  # <START>\n","  for s in x_train_preprocessed :\n","    for t in s :\n","      if t not in vocabulary.keys() :\n","        vocabulary[t] = id\n","        id+=1\n","  # <END>\n","  return vocabulary\n","\n","vocabulary = create_vocabulary(x_train_preprocessed)\n","print(len(vocabulary))"],"metadata":{"id":"FKRU-3xDOLpx","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534570889,"user_tz":-330,"elapsed":1120,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"dcce4506-5aa0-4aad-9e85-25979985c600"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["83978\n"]}]},{"cell_type":"markdown","source":["## **Converting to Numerical Form**\n","Since we need to convert our words into numerical input for the neural network to be able to process it, let's replace the words in our reviews with their corresponding IDs from the vocabulary (not their one-hot embeddings, just their IDs).\n","\n","Complete the below function that takes as input the set of reviews (`x_train_preprocessed` and `x_test_preprocessed`) and converts them to their numerical form.\n"],"metadata":{"id":"oFsfs_POeMkk"}},{"cell_type":"code","source":["def convert_to_numerical(x_set):\n","  converted = []\n","    # <START>\n","  converted = [ [vocabulary[p] for p in r if p in vocabulary.keys()] for r in x_set ]\n","    # <END>\n","  return converted\n","\n","#Testing your function\n","vocab_list = list(vocabulary.keys())\n","print(convert_to_numerical([[vocab_list[47],vocab_list[186],vocab_list[4005]]]))\n","assert convert_to_numerical([[vocab_list[47],vocab_list[186],vocab_list[4005]]]) == [[48, 187, 4006]]"],"metadata":{"id":"zhjvZjcMhRHI","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534574053,"user_tz":-330,"elapsed":421,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"75217ee3-06e3-461c-fd00-979694fa0a2a"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["[[48, 187, 4006]]\n"]}]},{"cell_type":"code","source":["x_train_numerical = convert_to_numerical(x_train_preprocessed)\n","x_test_numerical = convert_to_numerical(x_test_preprocessed)\n","\n","print(len(x_train_numerical))"],"metadata":{"id":"hkXMWld3ehG9","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534579630,"user_tz":-330,"elapsed":1885,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"8237166e-e561-4287-95f1-dd48216f52d1"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["40000\n"]}]},{"cell_type":"markdown","source":["Notice that our sentiment labels (`y_train` and `y_test`) currently contain the words `positive` and `negative`. Let's convert them to `1` and `0` respectively."],"metadata":{"id":"bKjdEgl3ikYE"}},{"cell_type":"code","source":["def convert_labels(y_set):\n","  converted=[]\n","    # <START>\n","  converted = [ 1 if r == 'positive' else 0 for r in y_set]\n","    # <END>\n","  return converted\n","\n","assert convert_labels(['positive','negative','positive','positive','negative']) == [1,0,1,1,0]\n","\n","y_train_numerical = convert_labels(y_train)\n","y_test_numerical = convert_labels(y_test)\n","\n","print(len(y_train_numerical))\n","print(len(y_train))"],"metadata":{"id":"bkDKnbYHi4tm","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534595681,"user_tz":-330,"elapsed":419,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"96059818-4e4b-4b2a-c782-a0d02948057b"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["40000\n","40000\n"]}]},{"cell_type":"markdown","source":["## **Normalizing the Reviews' lengths**\n","Since our reviews have variable lengths, we will employ a technique called **padding**.to normalize them.\n","\n","Run the below cell to analyze the present lengths of our reviews."],"metadata":{"id":"k97nNtmeTXKn"}},{"cell_type":"code","source":["lengths = [len(i) for i in x_train_preprocessed]\n","lengths_sum = sum(lengths)\n","num_lengths = len(lengths)\n","avg_length = lengths_sum/num_lengths\n","max_length = max(lengths)\n","\n","print(\"Average length of reviews: \", avg_length)\n","print(\"Length of the longest review: \", max_length)"],"metadata":{"id":"lBpGv4w9T4AR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534631620,"user_tz":-330,"elapsed":437,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"7416d75c-a200-4001-a005-7cf75c7ddfd0"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Average length of reviews:  123.540625\n","Length of the longest review:  1455\n"]}]},{"cell_type":"markdown","source":["Padding all the reviews to the maximum length would preserve all our data, but at the same time it would be highly inefficient. Instead, let's settle on an intermediate value of 150 and pad all shorter reviews to 150. As for the longer ones, our model can probably perform sentiment analysis without the *entire* review, so we'll truncate them to 150 words.\n","\n","For this purpose, we shall use a ghost ID of `0` to represent the padding token. This is why we did not give this ID to the first word.\n","\n","Run the below cell to normalize the lengths as mentioned."],"metadata":{"id":"bveQkxZOWnS8"}},{"cell_type":"code","source":["def normalize(x_set, max_length):\n","    temp = np.zeros((len(x_set), max_length),dtype=int)\n","    for i, sentence in enumerate(x_set):\n","        if len(sentence) != 0:\n","            temp[i, -len(sentence):] = np.array(sentence)[:max_length]\n","    return temp\n","\n","max_length = 150\n","\n","x_train_normalized = normalize(x_train_numerical, max_length)\n","x_test_normalized = normalize(x_test_numerical, max_length)"],"metadata":{"id":"ouVh5UrnZKDT","executionInfo":{"status":"ok","timestamp":1690534637530,"user_tz":-330,"elapsed":1822,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}}},"execution_count":14,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"5CEWbRjXBrbP"},"source":["## **Converting the Data to Tensors**\n","Now that we are done processing all the reviews, it's time to start building our sentiment analysis model. But first, we'll need to convert our training and testing data into a suitable form.\n","\n","This can be done using the `TensorDataset` class of PyTorch, which creates a dataset containing tensors for input features and labels.\n","\n","Since this class takes only NumPy ndarrays as parameters, we'll need to convert `y_train_numerical` and `y_test_numerical` into ndarrays."]},{"cell_type":"code","source":["final_train_data = TensorDataset(torch.from_numpy(x_train_normalized), torch.tensor(y_train_numerical))\n","final_test_data = TensorDataset(torch.from_numpy(x_test_normalized), torch.tensor(y_test_numerical))"],"metadata":{"id":"qLVPF86FnW6Z","executionInfo":{"status":"ok","timestamp":1690534642803,"user_tz":-330,"elapsed":2,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}}},"execution_count":15,"outputs":[]},{"cell_type":"markdown","source":["## **Loading the Data in Batches**\n","Since our dataset is quite large, loading it all at once won't be feasible. A much more efficient way of loading the dataset is to do it in **batches**. This can be done using PyTorch's DataLoader constructor.\n","\n","The below cell creates `train_batch_loader` and `test_batch_loader`, using the variable `batch_size`.\n","\n","<details>\n","  <summary>Note</summary>\n","The shuffle = True parameter is important, omitting it would defeat the purpose of batching!</details>"],"metadata":{"id":"pjG46lSurNmF"}},{"cell_type":"code","execution_count":16,"metadata":{"id":"ITFt2pVBBrbP","executionInfo":{"status":"ok","timestamp":1690534646031,"user_tz":-330,"elapsed":406,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}}},"outputs":[],"source":["batch_size = 64\n","\n","train_batch_loader = DataLoader(final_train_data, shuffle=True, batch_size=batch_size)\n","test_batch_loader = DataLoader(final_test_data, shuffle=True, batch_size=batch_size)"]},{"cell_type":"markdown","source":["Run the following cell to visualize an input-labels pair from a batch of the training data. Observe that the size of any set of input features is $[\\textrm{number of batches}, \\textrm{maximum (normalized) length of review}]$."],"metadata":{"id":"jdaNXixrs_ov"}},{"cell_type":"code","execution_count":17,"metadata":{"id":"0sGdzClJBrbP","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534648957,"user_tz":-330,"elapsed":721,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"26ba51a9-277a-4910-fef8-3e5e83c27d54"},"outputs":[{"output_type":"stream","name":"stdout","text":["Input size: torch.Size([64, 150])\n","Input feature: \n"," tensor([[    0,     0,     0,  ...,   172,   191,   191],\n","        [    0,     0,     0,  ...,   770,   765,  1188],\n","        [    0,     0,     0,  ...,  6265,   383,   316],\n","        ...,\n","        [    0,     0,     0,  ...,   520,   231,   938],\n","        [    0,     0,     0,  ...,   478,   479,   191],\n","        [38778, 38779,  1325,  ...,  8483,   451,   523]])\n","Label: \n"," tensor([1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0,\n","        0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 1, 1, 0,\n","        0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1])\n"]}],"source":["sample_batch = train_batch_loader\n","for x, y in sample_batch:\n","  print(\"Input size:\", x.size())\n","  print(\"Input feature: \\n\", x)\n","  print(\"Label: \\n\", y)\n","  break\n"]},{"cell_type":"markdown","metadata":{"id":"YlOP0HiBBrbP"},"source":["## **Building the Model**\n","Complete the below cell to build the RNN model. This time, we will be using **Python classes** to define the model. The class will inherit from `torch.nn.Module`, which is PyTorch's base class for all neural network modules.\n","\n","This time, the model will have 5 parts:\n","- An **Embedding** layer that converts the IDs of all the words in the vocabulary, and converts them to embedding vectors of a defined size  \n","Note that this is basically doing the job of the emdedding model from last time\n","- The **LSTM layer(s)** that will sequentially run through the data.  \n","PyTorch allows you to define multiple continuous LSTM layers with a simpler syntax than having to individually define each one\n","- The **Dropout** layer. This makes sure our model doesn't overfit the training data. With a predefined probability, it excludes certain nodes from the architecture in each training run.\n","- The **Linear** layer. This takes the predicted tokens and converts them into a single prediction on whether or not the sentiment is positive or negative.\n","- Of course, the part of making the predicition a probability is done by the **Sigmoid** layer\n","\n","The forward function has already been written for you. You are to now define these layers in the RNN object.\n","\n","For the LSTM layer, note that the current assignment implements a *batch first* approach."]},{"cell_type":"code","execution_count":18,"metadata":{"id":"xa8yqaeDBrbP","executionInfo":{"status":"ok","timestamp":1690534652799,"user_tz":-330,"elapsed":408,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}}},"outputs":[],"source":["class RNN_SA(nn.Module):\n","\n","    # CLASS CONSTRUCTOR\n","    def __init__(self, num_layers, hidden_layer_size, embedding_layer_size, output_layer_size, vocabulary_size, dropout_probability=0.5):\n","        super(RNN_SA,self).__init__()\n","\n","        # Initialize the class variables with the values provided as arguments\n","        self.output_layer_size = output_layer_size\n","        self.hidden_dim = hidden_layer_size\n","        self.num_layers = num_layers\n","        self.vocabulary_size = vocabulary_size\n","\n","        # <START>\n","        # Define the embedding layer\n","        self.embedding = nn.Embedding(vocabulary_size, embedding_layer_size)\n","\n","        # Define the LSTM unit\n","        self.lstm = nn.LSTM(embedding_layer_size, hidden_layer_size, num_layers = 2, batch_first = True)\n","\n","        # Define the Dropout layer\n","        self.dropout_layer = nn.Dropout( p = dropout_probability, inplace = False)\n","\n","        # Define the linear hidden layer and output sigmoid layer\n","        self.linear_layer = nn.Linear(hidden_layer_size, output_layer_size, bias = True)\n","        self.sigmoid_layer = nn.Sigmoid()\n","        # <END>\n","\n","    def forward(self, x):\n","        batch_size = x.size(0)\n","        embeds = self.embedding(x)\n","        lstm_out,_ = self.lstm(embeds)\n","        lstm_out = lstm_out.contiguous().view(-1, self.hidden_dim)\n","        out = self.dropout_layer(lstm_out)\n","        out = self.linear_layer(out)\n","        sig_out = self.sigmoid_layer(out)\n","        sig_out = sig_out.view(batch_size, -1)\n","        sig_out = sig_out[:, -1]\n","        return sig_out"]},{"cell_type":"markdown","source":["Run the below cell to create a model using the class you just defined.\n","\n","<details>\n","  <summary>Why is vocabulary_size = len(vocabulary) + 1?</summary>\n","  The extra 1 is because of the ghost ID 0 we added for padding\n","</details>"],"metadata":{"id":"b6Evd1FaS857"}},{"cell_type":"code","execution_count":19,"metadata":{"id":"9R_KCEx7BrbQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690534656355,"user_tz":-330,"elapsed":570,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"2ed3bd2d-3916-4ea4-c89a-ff266f591e32"},"outputs":[{"output_type":"stream","name":"stdout","text":["RNN_SA(\n","  (embedding): Embedding(83979, 64)\n","  (lstm): LSTM(64, 256, num_layers=2, batch_first=True)\n","  (dropout_layer): Dropout(p=0.3, inplace=False)\n","  (linear_layer): Linear(in_features=256, out_features=1, bias=True)\n","  (sigmoid_layer): Sigmoid()\n",")\n"]}],"source":["num_layers = 2\n","vocabulary_size = len(vocabulary) + 1\n","embedding_layer_size = 64\n","output_layer_size = 1\n","hidden_layer_size = 256\n","\n","\n","model = RNN_SA(num_layers, hidden_layer_size, embedding_layer_size, output_layer_size, vocabulary_size, dropout_probability=0.3)\n","\n","print(model)"]},{"cell_type":"markdown","source":["Expected:\n","```console\n","RNN_SA(\n","  (embedding): Embedding(VOCAB_SIZE, 64)\n","  (lstm): LSTM(64, 256, num_layers=2, batch_first=True)\n","  (dropout_layer): Dropout(p=0.3, inplace=False)\n","  (linear_layer): Linear(in_features=256, out_features=1, bias=True)\n","  (sigmoid_layer): Sigmoid()\n",")\n","```"],"metadata":{"id":"D2RgepLVT1mg"}},{"cell_type":"markdown","source":["On the off-chance that your notebook ever died mid-training, in the training section we've implemented a saving mechanism that saves your model to your Drive if it improves from the previous epoch.\n","\n","Just set the aptly names variable to `True` and run this cell. Remember to set it back to `False` afterwards."],"metadata":{"id":"-MA_HOXOYCHy"}},{"cell_type":"code","source":["MY_NOTEBOOK_DIED_MID_TRAINING = False\n","\n","if MY_NOTEBOOK_DIED_MID_TRAINING:\n","  model = torch.load('/content/drive/MyDrive/state_dict.pt')"],"metadata":{"id":"6k0rFhpcS7JD","executionInfo":{"status":"ok","timestamp":1690534661917,"user_tz":-330,"elapsed":396,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}}},"execution_count":20,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"aVdOn9zDBrbQ"},"source":["## **Training the Model**\n","Now that we have our model, let's begin training it on our training data. The hyperparameters have been defined for you. You might notice that the number of epochs is quite low; this is because each epoch takes a pretty long time to run and a model trained with even 5 epochs would take over an hour to finish training.\n","\n","Since our model is a binary classifier trained to predict 0 and 1, we can use Binary Cross Entropy loss to measure the loss.\n","\n","Unlike in the first week's assignment, you will not need to explicitly update the parameters after each run of gradient descent, we have imported an optimizer that takes care of this.\n","\n","We have also given you a function `accuracy`, that takes as arguments the predictions generated by the model and the corresponding true values, and returns the accuracy.\n"]},{"cell_type":"markdown","source":["\n","Your task is to complete the rest of the cell and train the model.\n","\n","**Again, each epoch could take upto 15 minutes to run, so please be patient!**\n","\n","If your notebook ever dies mid-training, go to the cell below this one.\n","<details>\n","  <summary>What do model.train() and model.epoch do?</summary>\n","  Checkout https://stackoverflow.com/questions/60018578/what-does-model-eval-do-in-pytorch\n","</details>"],"metadata":{"id":"waP6OQiNZYNt"}},{"cell_type":"code","execution_count":21,"metadata":{"id":"Z49izPtgBrbQ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1690537490145,"user_tz":-330,"elapsed":2825634,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"8bac5058-8583-4f30-bd5c-0721ed74a013"},"outputs":[{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 625/625 [14:34<00:00,  1.40s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 1\n","train_loss : 364.86195635795593 test_loss : 76.22803035378456\n","train_accuracy : 68.8 test_accuracy : 77.13\n","Validation loss decreased (inf --> 76.228030).  Saving model ...\n","======================================================================\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 625/625 [14:22<00:00,  1.38s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 2\n","train_loss : 250.94978754222393 test_loss : 58.11610987782478\n","train_accuracy : 82.38499999999999 test_accuracy : 84.05\n","Validation loss decreased (76.228030 --> 58.116110).  Saving model ...\n","======================================================================\n"]},{"output_type":"stream","name":"stderr","text":["Training: 100%|██████████| 625/625 [14:11<00:00,  1.36s/it]\n"]},{"output_type":"stream","name":"stdout","text":["Epoch 3\n","train_loss : 186.52604757249355 test_loss : 52.12635174393654\n","train_accuracy : 87.59 test_accuracy : 86.31\n","Validation loss decreased (58.116110 --> 52.126352).  Saving model ...\n","======================================================================\n"]}],"source":["learning_rate = 1e-3\n","num_epochs = 3\n","\n","criterion = nn.BCELoss()\n","optimizer = torch.optim.Adam(model.parameters(), lr = learning_rate)\n","\n","def accuracy(prediction, label):\n","    prediction = torch.round(prediction.squeeze())\n","    return torch.sum(prediction == label.squeeze()).item()\n","\n","min_loss_attained = np.Inf    # this variable will contain the minimum value of the loss function attained in any of the epochs.\n","                              #It is used to discard the results of further epochs if their losses are more than min_loss_attained.\n","\n","epoch_train_loss,epoch_test_loss = [],[]\n","epoch_train_acc,epoch_test_acc = [],[]    # These lists will hold the average loss and accuracy values of each epoch\n","\n","\n","\n","for epoch in range(num_epochs):\n","  train_losses = 0.0\n","  train_accuracy = 0.0\n","\n","  progress_bar = tqdm(total=len(train_batch_loader), desc='Training', leave = True)  # You don't need to worry about this line,\n","                                                                                          # it's just to display a progress bar that shows the percentage trained\n","\n","  model.train()\n","\n","  for inputs, labels in train_batch_loader:\n","    inputs, labels = inputs.to(device), labels.to(device)\n","\n","    # <START>\n","    # Don't forget to reset the gradients before beginning!\n","    output = model(inputs)\n","\n","    # compute the loss and implement the back propagation step\n","    loss = criterion(output.float(), labels.float())\n","    loss.backward()\n","    optimizer.step()\n","    optimizer.zero_grad()\n","    # <END>\n","\n","    # Calculating loss and accuracy; we will store the cumulative values and finally use them to compute the average loss and accuracy of the epoch\n","    train_losses += loss.item()\n","    acc = accuracy(output,labels)\n","    train_accuracy += acc\n","\n","    nn.utils.clip_grad_norm_(model.parameters(), 5) # This line helps avoid the exploding gradient problem\n","\n","    optimizer.step()\n","\n","    progress_bar.update(1)\n","\n","  progress_bar.close()\n","\n","  # After the training run of each epoch, we will evaluate the performance of our model\n","\n","  test_losses = 0.0  # Again, this will store cumulative loss\n","  test_accuracy = 0.0   # and this will store cumulative test accuracy\n","\n","  model.eval()\n","\n","  for inputs, labels in test_batch_loader:\n","    inputs, labels = inputs.to(device), labels.to(device)\n","\n","    # <START>   # Compute the loss\n","    output = model(inputs)\n","    test_loss = criterion(output.float(), labels.float())\n","    # <END>\n","\n","    test_losses += test_loss.item()\n","\n","    acc = accuracy(output,labels)\n","    test_accuracy += acc\n","\n","\n","  epoch_train_accuracy = train_accuracy/len(train_batch_loader.dataset)\n","  epoch_test_accuracy = test_accuracy/len(test_batch_loader.dataset)\n","\n","\n","  avg_train_loss = np.mean(train_losses)\n","  avg_test_loss = np.mean(test_losses)\n","\n","  epoch_train_loss.append(avg_train_loss)\n","  epoch_test_loss.append(avg_test_loss)\n","  epoch_test_acc.append(epoch_test_accuracy)\n","  epoch_train_acc.append(epoch_train_accuracy)\n","\n","  print(f'Epoch {epoch+1}')\n","  print(f'train_loss : {avg_train_loss} test_loss : {avg_test_loss}')\n","  print(f'train_accuracy : {epoch_train_accuracy*100} test_accuracy : {epoch_test_accuracy*100}')\n","  if avg_test_loss < min_loss_attained:\n","    torch.save(model.state_dict(), '/content/drive/MyDrive/state_dict.pt')\n","    print('Validation loss decreased ({:.6f} --> {:.6f}).  Saving model ...'.format(min_loss_attained, avg_test_loss))\n","    min_loss_attained = avg_test_loss\n","  print(70*'=')\n"]},{"cell_type":"markdown","source":["Let's visualize the accuracy and loss of our model graphically. Run the below cell to generate plots for the same."],"metadata":{"id":"X_UPDcpRk8HI"}},{"cell_type":"code","execution_count":22,"metadata":{"id":"vtl0ZSZFBrbQ","colab":{"base_uri":"https://localhost:8080/","height":341},"executionInfo":{"status":"ok","timestamp":1690537672749,"user_tz":-330,"elapsed":1393,"user":{"displayName":"Himanshu Gangwal","userId":"12717445236402463903"}},"outputId":"8bf5ff01-b0f2-4401-e33f-0893d68f94a4"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 2000x600 with 2 Axes>"],"image/png":"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WqFybgXMxezt7bGysrrk2A4dOjB37lxefvllfvvtNxYsWGBuXm80GosdV9++fVmyZAmJiYnEx8ezevVqrUoREREREZFSq1WrVsTHx/P1119Tp04dvvrqKxo0aMBXX31lPubZZ59lz549jBs3DgcHB0aPHk3NmjXNq/lFROTWUM8UEZFyaObMmXh5eTFx4sRLHps9ezbR0dFMmTKF0NBQtm3bdtXnCg0NZc2aNeTl5WFra3vZYypVqgQU7t97oYMHD153zFu3bmXPnj1888039O3b1zy+YMGCIsedWxZ/rbgBHn74YUaOHMn333/PmTNnsLW1pVevXtcdk4iIiIiISEl5enri5OTE7t27L3ls165dWFlZERgYaB6rXLkyAwYMYMCAAZw6dYpWrVoxZswYBg0aZD4mNDSU559/nueff569e/dSv359PvzwQ2bMmHFb7klE5E6klSkiIuXMmTNnmD17Nvfddx8PPPDAJR8jRowgMzOTOXPm0LNnTzZv3kx0dPQlz3OuuXzPnj1JT0/ns88+u+IxwcHBWFtbs3Tp0iKPT5o06brjtra2LvKc5z7/+OOPixzn6elJq1at+Prrr0lISLhsPOd4eHhw7733MmPGDGbOnMk999yDh4fHdcckIiIiIiJSUtbW1nTs2JHff/+dAwcOmMdTU1OZNWsWLVq0wNXVFYCjR48WOdfZ2ZmwsDBycnIAyMrKIjs7u8gxoaGhuLi4mI8REZFbQytTRETKmTlz5pCZmcl//vOfyz5+11134enpycyZM5k1axa//PILDz74IAMHDqRhw4YcO3aMOXPmMGXKFOrVq0ffvn359ttvGTlyJGvXrqVly5acPn2ahQsXMmzYMLp164abmxsPPvggn376KQaDgdDQUP7880+OHDly3XHXqFGD0NBQXnjhBZKSknB1deXXX3+9bFPFTz75hBYtWtCgQQOGDBlClSpVOHDgAHPnzmXTpk1Fju3bty8PPPAAAG+99db1J1JERERERKSYvv76a/7+++9LxseMGcOCBQto0aIFw4YNw8bGhs8//5ycnBzee+8983G1atWiTZs2NGzYkMqVK7N+/Xp++eUXRowYAcCePXto164dDz30ELVq1cLGxobo6GhSU1N5+OGHb9t9iojciVRMEREpZ2bOnImDgwMdOnS47ONWVlZ06dKFmTNnkpOTw7Jly3j9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okXExsZyzz330LVrVxISEq76PG+88QYPPfQQW7ZsoXPnzjz66KMcO3bsisdnZWXxwQcf8N1337F06VISEhJ44YUXzI+/++67zJw5k2nTprFixQoyMjIuKWJcTmZmJj///DOPPfYYHTp04OTJkyxbtsz8+KlTp2jdujVJSUnMmTOHzZs389JLL2E0GgGYO3cu3bt3p3PnzsTGxrJo0SKaNGlyzete7JVXXuGZZ55h586ddOrUiezsbBo2bMjcuXPZtm0bQ4YMoU+fPqxdu9Z8zqhRo3jnnXcYPXo0O3bsYNasWXh7ewMwaNAgZs2aRU5Ojvn4GTNm4O/vz913313s+ERERERERERERO5kt2J+93rnfTW/e32io6N57rnnGD58OFu2bOGJJ55gwIABLF68GIBff/2Vjz76iM8//5y9e/fy22+/ERERAcD69et5+umnefPNN9m9ezd///03rVq1Ktb1i0vbfF3BmbwCar32j0WuvePNTjjZ3Zy/mjfffJMOHTqYv65cuTL16tUzf/3WW28RHR3NnDlzLlkZcaH+/fvTu3dvAN5++20++eQT1q5dyz333HPZ4/Py8pgyZQqhoaEAjBgxgjfffNP8+KeffsqoUaPMq0I+++wz5s2bd837+eGHHwgPD6d27doAPPzww0ydOpWWLVsCMGvWLNLS0li3bh2VK1cGICwszHz+2LFjefjhh3njjTfMYxfm43o9++yz9OjRo8jYhf+YPPXUU/zzzz/89NNPNGnShMzMTD7++GM+++wz+vXrB0BoaCgtWrQAoEePHowYMYLff/+dhx56CCisAPfv3x+DwVDs+ERERERERERERO5kmt8tqrTM717ogw8+oF+/fgwaNAhXV1dq1KjB6tWr+eCDD2jbti0JCQn4+PjQvn17bG1tCQoKMr8xPiEhgQoVKnDffffh4uJCcHAwkZGRxbp+cd3QypSJEycSEhKCg4MDTZs2LfLu+8uZMGEC1atXx9HRkcDAQJ577jmys7PNj4eEhFy2wc7w4cPNx7Rp0+aSx4cOHXoj4d9RGjVqVOTrU6dO8cILL1CzZk0qVqyIs7MzO3fuvGblsm7duubPK1SogKurK0eOHLni8U5OTuZvNABfX1/z8SdPniQ1NbXIihBra2saNmx4zfuZPn06jz32mPnrxx57jJ9//pnMzEwANm3aRGRkpLmQcrFN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P//8kmPPreKOi4sjNDQUHx8f1q5dW+SY1NRUgKvuk21vb4+9/aWT/7a2thadTLH09a/G1hb6NKtC76bB/LklmUkxcexJPcXkpfuZtuogDzcOYkirqvhVvPaq9VsXY+nNX1mg/JWM8lcyyl/JKH8lU5bzV1BQgMFgwMrK6tq7At1k53bpOXf9G3Xu3HN/npvfrVix4nXN7/7666/4+PhQuXJlrKysCAkJYfHixbRs2dI8v3tuTvbcNQwGwyVxX3hMrVq1aN++PUOHDr1kfvdqub7weV1cXHjyySd5+eWX8fDwICgoiPfee4+srCwGDRqEwWDg7bffJioqioiICHJycpg3bx41a9bEysrqmvd5vbk1GAyXfY0X5zWvDajLqUGDBvHVV18xbdo0IiIiaN26NdOnT6dKlSoAuLi4mJu4N27cmAMHDjBv3jzzC/DDDz9kwYIFBAYGXnF/5evx7bff4u3tTatWrejevTuDBw/GxcXlkgrgOVOnTqVWrVpFCinn3HfffeaG7dWqVWP+/Pls3ryZJk2aEBUVxe+//46NTWF9cPTo0Tz//PO89tpr1KxZk169epmXx9na2vL999+za9cu6taty7vvvsv//d//Xdf9TJ06lePHj9OgQQP69OnD008/jZeXV5Fjfv31Vxo3bkzv3r2pVasWL7300iWrfB5//HFyc3MZOHDgdV1XRESkrDiRlcuM1QfpOXklrd+PYcLCvRw4moWjrTXdI/35dmATVo1qx/+61FIhReQajEZjkX4mFzq3strX1xeAqKgotm7dav6ZFwq36nB1dTVvFSY3l421FfdH+vP3M634ok9D6gW4kZ1nZPrKA7R+fzEv/7KF/emnLR2miIiIlFFldX73ct555x169uxJnz59aNCgAXFxcfzzzz/mN/Db2dnxv//9j7p169KqVSusra354Ycfrus+byeD6cLGEeVYRkYGbm5unDx58pLlR9nZ2ezfv58qVaoU60VQHEajkYyMDFxdXS3yF11aJCYmEhgYyMKFC4vVIL685e+7777jueee4/Dhw9jZ2RX7/OK+ZvPy8pg3bx6dO3cus+8wsCTlr2SUv5JTDktG+SuZ68lfTn4Bi3elER2byOJdaeY+KFYGaB5W2AelU+07sw+KpV9/V/sZWEqXUaNGce+99xIUFERmZiazZs3i3Xff5Z9//qFq1arMmjWL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7w2welemfvX+tyqvdGhkl1ZaMmWAvK1cCggAAAAAAABIOhP2WF3bZTjtdmXtPS1n13q+sufcK3QuCH1qceVNjY+rKfQ593EXuUKo4pzQqNLmCqLO5ahwbfbSC07FJClYkjL210fnama+1FU2NYU5VxLwnPu4OlwNZPYg7IEkwpR69+n243r0492qdDh1c68IvXRXP3l6cJkdAAAAAAAA0GiYTK4P3j0a6JT9DseF4c5FAp6K8tNKTUnSgL695CHHZYKh2gY85wZDNUz35qw8r167VG6v+VwagktMrWYxe2h4UakseX+TPLzrf7o3s4Wwp54QptSjxEyT/rl5l5xO6RcD2urPt/eSh4UgBQAAAAAAAMBVZDZLZm/J6n3ZXZ12uzL32eTsVo9X9lSt11OHqdWuxjo8NQU8549V2CQ5q9d79vlrYJYUIkklade4aRdjqiGEqSGYcTvgqelqoHMfd5GrgcxNZ0YmwpR68kbiQX140PXCmTakvZ66tYfMZhJDAAAAALXzhz/8QU8//XS1sS5dumjv3r2SpLKyMv3mN7/RypUrZbPZNG7cOL322msKDw83olwAAICLM1sks49k9TG6kppVVtQQ1Jw3tdqZsYry09qWkqT+fXvJw1npRsBzueneznmeapxSRZlra4hMlktcZeMpi9mq4QXFUv+2UtQAo6u9JMKUelBUZteK5COSpF9e31GP3tRNJi69AgAAAFBHPXr00Jdffll128Pjx7d08+bN06pVq/Thhx8qMDBQc+fO1e23366NGzcaUSoAAEDjZfFwbfK97K5Ou10nfrDL2b2eruxxOl3r31wi4KnzFTy1WYfnsmsDnbNVq7dSqjjt2s7PgfTjlT0VNazn09AQptQDf2+rls8YqNc+/ka/GRNDkAIAAADginh4eCgiIuKC8YKCAsXHx2vFihW68cYbJUnLli1Tt27dtHnzZg0ePLi+SwUAAMC1YDKdmVrLKnn6GV3NhZzOOqynU64KW6m2bU1Wv5DrjK78sghT6kn7YF/9pLXz8jsCAAAAwEWkpaUpMjJS3t7eGjJkiBYuXKh27dopNTVVdrtdo0ePrtq3a9euateunZKSki4apthsNtlsP/6JYGFhoSTJbrfLbq//RWDPHtOIYzcF9M899M899M899M899M899M899K8mJsns5douc7GO3W7XiXSHelr9JQN//6wNwhQAAAAAaATi4uK0fPlydenSRSdOnNDTTz+tESNGaNeuXcrMzJSnp6eCgoKqPSY8PFyZmZkXfc6FCxdesA6LJK1Zs0a+vpef1uJaSUhIMOzYTQH9cw/9cw/9cw/9cw/9cw/9cw/9c49R/Sstrf30YoQpAAAAANAI3HTTTVVf9+7dW3FxcWrfvr3+8Y9/yMfnyhZvXbBggebPn191u7CwUFFRURo7dqwCAgLcrrmu7Ha7EhISNGbMGFnrY87xJob+uYf+uYf+uYf+uYf+uYf+uYf+ucfo/p29Mrs2CFMAAAAAoBEKCgrSddddp/T0dI0ZM0bl5eXKz8+vdnVKVlZWjWusnOXl5SUvL68Lxq1Wq6EfBhh9/MaO/rmH/rmH/rmH/rmH/rmH/rmH/rnHqP7V5Zjma1gHAAAAAOAaKS4u1v79+9W6dWsNGDBAVqtVa9eurbp/3759ysjI0JAhQwysEgAAAGgauDIFAAAAABqB3/72t7r11lvVvn17HT9+XE899ZQsFovuvvtuBQYGaubMmZo/f76Cg4MVEBCghx56SEOGDLno4vMAAAAAao8wBQAAAAAagaNHj+ruu+9Wbm6uWrVqpeHDh2vz5s1q1aqVJOnFF1+U2WzWxIkTZbPZNG7cOL322msGVw0AAAA0DYQpAAAAANAIrFy58pL3e3t7a/HixVq8eHE9VQQAAAA0H6yZAgAAAAAAAAAAcAmEKQAAAAAAAAAAAJdAmAIAAAAAAAAAAHAJhCkAAAAAAAAAAACXQJgCAAAAAAAAAABwCYQpAAAAAAAAAAAAl0CYAgAAAAAAAAAAcAmEKQAAAAAAAAAAAJdAmAIAAAAAAAAAAHAJhCkAAAAAAAAAAACX4GF0AfXF6XRKkgoLCw05vt1uV2lpqQoLC2W1Wg2poTGjf+6hf+6hf+6hf+6jh+6hf+6hf+4xun9nf/c9+7swcDm8b2rc6J976J976J976J976J976J976J97jO5fXd4zNZswpaioSJIUFRVlcCUAAABA/SoqKlJgYKDRZaAR4H0TAAAAmqPavGcyOZvJn6k5HA4dP35c/v7+MplM9X78wsJCRUVF6ciRIwoICKj34zd29M899M899M899M999NA99M899M89RvfP6XSqqKhIkZGRMpuZ4ReXx/umxo3+uYf+uYf+uYf+uYf+uYf+uYf+ucfo/tXlPVOzuTLFbDarbdu2RpehgIAA/lG5gf65h/65h/65h/65jx66h/65h/65x8j+cUUK6oL3TU0D/XMP/XMP/XMP/XMP/XMP/XMP/XNPY3jPxJ+nAQAAAAAAAAAAXAJhCgAAAAAAAAAAwCUQptQTLy8vPfXUU/Ly8jK6lEaJ/rmH/rmH/rmH/rmPHrqH/rmH/rmH/gF1w78Z99A/99A/99A/99A/99A/99A/99A/9zSm/jWbBegBAAAAAAAAAACuBFemAAAAAAAAAAAAXAJhCgAAAAAAAAAAwCUQpgAAAAAAAAAAAFwCYQoAAAAAAAAAAMAlEKa4YfHixerQoYO8vb0VFxenlJSUS+7/4YcfqmvXrvL29lavXr30+eefV7vf6XTqySefVOvWreXj46PRo0crLS3tWp6CoerSvzfeeEMjRoxQy5Yt1bJlS40ePfqC/adPny6TyVRtGz9+/LU+DcPUpX/Lly+/oDfe3t7V9uH1d/H+jRw58oL+mUwm3XLLLVX7NKfX3/r163XrrbcqMjJSJpNJn3zyyWUfs27dOvXv319eXl6Kjo7W8uXLL9inrj9TG6u69u+jjz7SmDFj1KpVKwUEBGjIkCH64osvqu3zhz/84YLXX9euXa/hWRinrv1bt25djf9+MzMzq+3H669mNf1sM5lM6tGjR9U+zeX1t3DhQg0aNEj+/v4KCwvThAkTtG/fvss+jt//0Nzxnsk9vGdyD++Z3MN7pivHeyb38J7JPbxncg/vmdzT1N83EaZcoQ8++EDz58/XU089pW3btqlPnz4aN26cTp48WeP+mzZt0t13362ZM2fq22+/1YQJEzRhwgTt2rWrap/nnntOr7zyipYsWaLk5GT5+flp3LhxKisrq6/Tqjd17d+6det099136+uvv1ZSUpKioqI0duxYHTt2rNp+48eP14kTJ6q2999/vz5Op97VtX+SFBAQUK03hw8frnY/r7+L9++jjz6q1rtdu3bJYrHojjvuqLZfc3n9lZSUqE+fPlq8eHGt9j948KBuueUW3XDDDdq+fbsefvhhzZo1q9ovt1fymm6s6tq/9evXa8yYMfr888+VmpqqG264Qbfeequ+/fbbavv16NGj2usvMTHxWpRvuLr276x9+/ZV609YWFjVfbz+Lu7ll1+u1rcjR44oODj4gp9/zeH1980332jOnDnavHmzEhISZLfbNXbsWJWUlFz0Mfz+h+aO90zu4T2Te3jP5B7eM7mH90zu4T2Te3jP5B7eM7mnyb9vcuKKxMbGOufMmVN1u7Ky0hkZGelcuHBhjfvfeeedzltuuaXaWFxcnPOBBx5wOp1Op8PhcEZERDiff/75qvvz8/OdXl5ezvfff/8anIGx6tq/81VUVDj9/f2db731VtXYtGnTnLfddtvVLrVBqmv/li1b5gwMDLzo8/H6q9vr78UXX3T6+/s7i4uLq8aa0+vvXJKcH3/88SX3+d3vfufs0aNHtbG77rrLOW7cuKrb7n5PGqva9K8m3bt3dz799NNVt5966ilnnz59rl5hjURt+vf11187JTlPnTp10X14/dXexx9/7DSZTM5Dhw5VjTXX19/JkyedkpzffPPNRffh9z80d7xncg/vmdzDeyb38J7p6uE9k3t4z+Qe3jO5h/dM7mtq75u4MuUKlJeXKzU1VaNHj64aM5vNGj16tJKSkmp8TFJSUrX9JWncuHFV+x88eFCZmZnV9gkMDFRcXNxFn7OxupL+na+0tFR2u13BwcHVxtetW6ewsDB16dJFDz74oHJzc69q7Q3BlfavuLhY7du3V1RUlG677Tbt3r276j5ef3V7/cXHx2vSpEny8/OrNt4cXn9X4nI//67G96Q5cTgcKioquuDnX1pamiIjI9WpUydNnjxZGRkZBlXYMPXt21etW7fWmDFjtHHjxqpxXn91Ex8fr9GjR6t9+/bVxpvj66+goECSLvi3eC5+/0Nzxnsm9/CeyT28Z3IP75nqH++Zri7eM10Z3jNdHbxnqq6pvW8iTLkCOTk5qqysVHh4eLXx8PDwC+YTPCszM/OS+5/9b12es7G6kv6d79FHH1VkZGS1f0Tjx4/X22+/rbVr1+r//u//9M033+imm25SZWXlVa3faFfSvy5dumjp0qX69NNP9e6778rhcGjo0KE6evSoJF5/Uu3PNSUlRbt27dKsWbOqjTeX19+VuNjPv8LCQp0+ffqq/ExoTl544QUVFxfrzjvvrBqLi4vT8uXLtXr1ar3++us6ePCgRowYoaKiIgMrbRhat26tJUuW6F//+pf+9a9/KSoqSiNHjtS2bdskXZ3/JzUXx48f13//+98Lfv41x9efw/H/27u/kKb+P47j72/qUbuoEQuVoqGSEuXoHxMtMDCC6qLu9MIh0R+IhIQKvAkRb1ZIXoQXBf0jyrGCEgrM/LMupLqoRassmkkQlEEgWVYX+f5d/PDw3Vc9Os+auT0fIOl87+yct++dzqtPc+NSX18vW7ZskXXr1k1bx/UfUhmZyR4ykz1kJnvITIlHZoovMlNsyEzxQ2aKloy5KT2hjwbEgc/nE7/fL8FgMOoNAaurq83PS0pKxO12S2FhoQSDQamsrJyPXf1rlJWVSVlZmfl1eXm5rFmzRs6dOyfNzc3zuGcLz4ULF6SkpEQ8Hk/U7cwfEuH69evS1NQkHR0dUb+/dufOnebnbrdbSktLxeVySSAQkP3798/Hrv41iouLpbi42Py6vLxcBgcHpbW1Va5evTqPe7bwXLlyRRwOh+zduzfq9lScvyNHjsiLFy+S9vccA1j4yEyxIzPFD5kJ84nMFDsyU/yQmaIlY27ilSlz4HQ6JS0tTYaHh6NuHx4eltzc3Cnvk5uba1k/8Wcs21yo5tK/CS0tLeLz+aSrq0vcbrdlbUFBgTidTolEIrb3+W9ip38TMjIyZMOGDWZvmL/ZHev379/F7/fP6i+6ZJ2/uZju/LdkyRLJzs6Oy0ynAr/fLwcOHJBAIDDp5a//5XA4pKioiPmbhsfjMXvD/M2OqsrFixfF6/WKYRiWtck+f3V1dXLnzh3p6+uTlStXWtZy/YdURmayh8xkD5nJHjJT4pGZ4oPMFD9kptiRmaIla25iMWUODMOQTZs2SU9Pj3nb+Pi49PT0RP1Pln8rKyuLqhcRuX//vlmfn58vubm5UTVfv36Vx48fT7vNhWou/RMROX36tDQ3N0tnZ6ds3rx5xsf58OGDfPnyRfLy8uKy33+Lufbv337//i3hcNjsDfM3u/7duHFDfv36JTU1NTM+TrLO31zMdP6Lx0wnu/b2dtm3b5+0t7fL7t27Z6z/9u2bDA4OMn/TePbsmdkb5m92Hjx4IJFIZFb/MJKs86eqUldXJ7du3ZLe3l7Jz8+f8T5c/yGVkZnsITPZQ2ayh8yUeGQm+8hM8UVmih2Z6f+SPjcl9O3uk4jf79fMzEy9fPmyvnr1Sg8dOqQOh0M/ffqkqqper1cbGhrM+v7+fk1PT9eWlhYdGBjQxsZGzcjI0HA4bNb4fD51OBza0dGhz58/1z179mh+fr7++PEj4cf3p8XaP5/Pp4Zh6M2bN/Xjx4/mx+joqKqqjo6O6vHjx/Xhw4c6NDSk3d3dunHjRl29erX+/PlzXo7xT4q1f01NTXrv3j0dHBzUJ0+eaHV1tWZlZenLly/NGuZv+v5N2Lp1q1ZVVU26PdXmb3R0VEOhkIZCIRURPXPmjIZCIX3//r2qqjY0NKjX6zXr3717p4sXL9YTJ07owMCAtrW1aVpamnZ2dpo1M/1Mkkms/bt27Zqmp6drW1tb1PlvZGTErDl27JgGg0EdGhrS/v5+3b59uzqdTv38+XPCj+9Pi7V/ra2tevv2bX379q2Gw2E9evSoLlq0SLu7u80a5m/6/k2oqanR0tLSKbeZKvN3+PBhXbp0qQaDwajn4tjYmFnD9R8QjcxkD5nJHjKTPWQme8hM9pCZ7CEz2UNmsifZcxOLKTacPXtWV61apYZhqMfj0UePHpnfq6io0Nra2qj6QCCgRUVFahiGrl27Vu/evRv1/fHxcT158qTm5ORoZmamVlZW6ps3bxJxKPMilv65XC4VkUkfjY2Nqqo6NjamO3bs0OXLl2tGRoa6XC49ePBgUp7UJ8TSv/r6erM2JydHd+3apU+fPo3aHvNn/fx9/fq1ioh2dXVN2laqzV9fX9+Uz8eJntXW1mpFRcWk+6xfv14Nw9CCggK9dOnSpO1a/UySSaz9q6iosKxXVa2qqtK8vDw1DENXrFihVVVVGolEEntgCRJr/06dOqWFhYWalZWly5Yt023btmlvb++k7TJ/tao69fN3ZGREs7Oz9fz581NuM1Xmb6q+iUjU+YzrP2AyMpM9ZCZ7yEz2kJnmjsxkD5nJHjKTPWQme5I9N/2jqhrrq1kAAAAAAAAAAABSBe+ZAgAAAAAAAAAAYIHFFAAAAAAAAAAAAAsspgAAAAAAAAAAAFhgMQUAAAAAAAAAAMACiykAAAAAAAAAAAAWWEwBAAAAAAAAAACwwGIKAAAAAAAAAACABRZTAAAAAAAAAAAALLCYAgAAAAAAAAAAYIHFFAAAAAAAAAAAAAsspgAAAAAAAAAAAFhgMQUAAAAAAAAAAMDC/wBOXFF0gpsrKgAAAABJRU5ErkJggg==\n"},"metadata":{}}],"source":["fig = plt.figure(figsize = (20, 6))\n","plt.subplot(1, 2, 1)\n","plt.plot(epoch_train_acc, label='Training Accuracy')\n","plt.plot(epoch_test_acc, label='Testing Accuracy')\n","plt.title(\"Accuracy\")\n","plt.legend()\n","plt.grid()\n","\n","plt.subplot(1, 2, 2)\n","plt.plot(epoch_train_loss, label='Training loss')\n","plt.plot(epoch_test_loss, label='Testing loss')\n","plt.title(\"Loss\")\n","plt.legend()\n","plt.grid()\n","\n","plt.show()"]}],"metadata":{"colab":{"provenance":[{"file_id":"1svQECddhmmaI0NlJa5iCqik4Nwyq0Utu","timestamp":1690537695554},{"file_id":"1l1dxNj0NfBgdoSiIE-f8AB_syvqYa7sK","timestamp":1690471844953},{"file_id":"1vTQ5E5IAznpP1DwSkmeqhqe7pp6GqE7U","timestamp":1690464712191},{"file_id":"1zhjsHO6ABBkz04Uo0M6cHN6dPzLn7UdU","timestamp":1690384320896}]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.6"}},"nbformat":4,"nbformat_minor":0}